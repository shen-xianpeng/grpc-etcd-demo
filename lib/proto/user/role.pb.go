// Code generated by protoc-gen-go. DO NOT EDIT.
// source: role.proto

package user

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CheckPermRequest struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckPermRequest) Reset()         { *m = CheckPermRequest{} }
func (m *CheckPermRequest) String() string { return proto.CompactTextString(m) }
func (*CheckPermRequest) ProtoMessage()    {}
func (*CheckPermRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48a3ff9f7c9032f8, []int{0}
}

func (m *CheckPermRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckPermRequest.Unmarshal(m, b)
}
func (m *CheckPermRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckPermRequest.Marshal(b, m, deterministic)
}
func (m *CheckPermRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckPermRequest.Merge(m, src)
}
func (m *CheckPermRequest) XXX_Size() int {
	return xxx_messageInfo_CheckPermRequest.Size(m)
}
func (m *CheckPermRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckPermRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckPermRequest proto.InternalMessageInfo

func (m *CheckPermRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type CheckPermResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckPermResponse) Reset()         { *m = CheckPermResponse{} }
func (m *CheckPermResponse) String() string { return proto.CompactTextString(m) }
func (*CheckPermResponse) ProtoMessage()    {}
func (*CheckPermResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_48a3ff9f7c9032f8, []int{1}
}

func (m *CheckPermResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckPermResponse.Unmarshal(m, b)
}
func (m *CheckPermResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckPermResponse.Marshal(b, m, deterministic)
}
func (m *CheckPermResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckPermResponse.Merge(m, src)
}
func (m *CheckPermResponse) XXX_Size() int {
	return xxx_messageInfo_CheckPermResponse.Size(m)
}
func (m *CheckPermResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckPermResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckPermResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CheckPermRequest)(nil), "CheckPermRequest")
	proto.RegisterType((*CheckPermResponse)(nil), "CheckPermResponse")
}

func init() { proto.RegisterFile("role.proto", fileDescriptor_48a3ff9f7c9032f8) }

var fileDescriptor_48a3ff9f7c9032f8 = []byte{
	// 127 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0xca, 0xcf, 0x49,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xd2, 0xe0, 0x12, 0x70, 0xce, 0x48, 0x4d, 0xce, 0x0e,
	0x48, 0x2d, 0xca, 0x0d, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe1, 0x62, 0x2d, 0xc9,
	0xcf, 0x4e, 0xcd, 0x93, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x70, 0x94, 0x84, 0xb9, 0x04,
	0x91, 0x54, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x1a, 0xd9, 0x70, 0xb1, 0x04, 0xe5, 0xe7, 0xa4,
	0x0a, 0x99, 0x70, 0x71, 0xc2, 0x25, 0x85, 0x04, 0xf5, 0xd0, 0x8d, 0x94, 0x12, 0xd2, 0xc3, 0xd0,
	0xab, 0xc4, 0xe0, 0xc4, 0x11, 0xc5, 0xa6, 0x67, 0x5d, 0x5a, 0x9c, 0x5a, 0x94, 0xc4, 0x06, 0x76,
	0x8d, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x17, 0xcf, 0x23, 0xa9, 0x9b, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RoleClient is the client API for Role service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RoleClient interface {
	CheckPerm(ctx context.Context, in *CheckPermRequest, opts ...grpc.CallOption) (*CheckPermResponse, error)
}

type roleClient struct {
	cc *grpc.ClientConn
}

func NewRoleClient(cc *grpc.ClientConn) RoleClient {
	return &roleClient{cc}
}

func (c *roleClient) CheckPerm(ctx context.Context, in *CheckPermRequest, opts ...grpc.CallOption) (*CheckPermResponse, error) {
	out := new(CheckPermResponse)
	err := c.cc.Invoke(ctx, "/Role/CheckPerm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServer is the server API for Role service.
type RoleServer interface {
	CheckPerm(context.Context, *CheckPermRequest) (*CheckPermResponse, error)
}

func RegisterRoleServer(s *grpc.Server, srv RoleServer) {
	s.RegisterService(&_Role_serviceDesc, srv)
}

func _Role_CheckPerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServer).CheckPerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Role/CheckPerm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServer).CheckPerm(ctx, req.(*CheckPermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Role_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Role",
	HandlerType: (*RoleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckPerm",
			Handler:    _Role_CheckPerm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "role.proto",
}
